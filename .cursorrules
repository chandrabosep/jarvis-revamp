# Skynet Agent Workflow Boilerplate

Complete boilerplate for building agent workflow applications with Web3 integration, HTTP-based workflow execution, and Skynet blockchain integration.

## üöÄ Quick Start

```bash
# Create Next.js 15 project
npx create-next-app@latest skynet-agent-app --typescript --tailwind --eslint --app

# Navigate to project
cd skynet-agent-app

# Install required dependencies
npm install @decloudlabs/skynet@0.6.28 @lifi/sdk@^3.6.0 zustand axios ethers @web3auth/modal-react-hooks @web3auth/base

# Install socket.io-client ONLY for agent generation
npm install socket.io-client@^4.8.1

# Install additional UI dependencies
npm install @radix-ui/react-dialog @radix-ui/react-toast lucide-react class-variance-authority clsx tailwind-merge

# Copy boilerplate files (see structure below)
```

## üìÅ Project Structure

```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx                 # Root layout with providers
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                   # Main dashboard
‚îÇ   ‚îú‚îÄ‚îÄ agents/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx              # Agent list
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [id]/page.tsx         # Agent detail
‚îÇ   ‚îî‚îÄ‚îÄ globals.css               # Tailwind styles
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/                       # Reusable UI components
‚îÇ   ‚îú‚îÄ‚îÄ agents/                   # Agent-specific components
‚îÇ   ‚îú‚îÄ‚îÄ workflow/                 # Workflow components
‚îÇ   ‚îî‚îÄ‚îÄ payments/                 # Payment components
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îú‚îÄ‚îÄ utils.ts                  # Utility functions
‚îÇ   ‚îî‚îÄ‚îÄ axios.ts                  # Axios configuration
‚îú‚îÄ‚îÄ hooks/                        # Custom React hooks
‚îú‚îÄ‚îÄ stores/                       # Zustand stores
‚îú‚îÄ‚îÄ types/                        # TypeScript definitions
‚îú‚îÄ‚îÄ utils/                        # Business logic utilities
‚îú‚îÄ‚îÄ providers/                    # Context providers
‚îú‚îÄ‚îÄ controllers/                  # API controllers
‚îî‚îÄ‚îÄ config/                       # Configuration files
```

## üîß Core Implementation Files

### Environment Configuration (.env.local)
```bash
# API Configuration
NEXT_PUBLIC_API_BASE_URL=https://your-api-url.com
NEXT_PUBLIC_NFT_USER_AGENT_URL=https://nft-user-agent-url.com
NEXT_PUBLIC_REDIS_USER_AGENT_URL=https://redis-user-agent-url.com

# Skynet Configuration  
NEXT_PUBLIC_STORAGE_API_URL=https://your-storage-url.com
NEXT_PUBLIC_SKYINTEL_API_URL=https://your-skyintel-url.com

# Web3Auth Configuration
NEXT_PUBLIC_WEB3AUTH_CLIENT_ID=your-web3auth-client-id
```

### Package.json Dependencies
```json
{
  "dependencies": {
    "@decloudlabs/skynet": "0.6.28",
    "@lifi/sdk": "^3.6.0",
    "@web3auth/modal-react-hooks": "^8.12.4",
    "@web3auth/base": "^8.12.4",
    "zustand": "^4.4.7",
    "axios": "^1.6.2",
    "ethers": "^6.8.1",
    "socket.io-client": "^4.8.1",
    "lucide-react": "^0.294.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.0.0"
  }
}
```

### API Configuration (src/config/constants.ts)
```typescript
// API Configuration
export const API_CONFIG = {
  STORAGE_API: process.env.NEXT_PUBLIC_STORAGE_API_URL,
  SKYINTEL_API: process.env.NEXT_PUBLIC_SKYINTEL_API_URL,
  NFT_USER_AGENT_URL: process.env.NEXT_PUBLIC_NFT_USER_AGENT_URL,
  REDIS_USER_AGENT_URL: process.env.NEXT_PUBLIC_REDIS_USER_AGENT_URL,
  BATCH_SIZE: 20,
  MAX_RETRIES: 3,
  RETRY_DELAY: 2000,
} as const

// Socket Configuration ONLY for Agent Generation
export const NATURAL_REQUEST_SOCKET_CONFIG = {
  URL: process.env.NEXT_PUBLIC_SKYINTEL_API_URL,
  TRANSPORTS: ["websocket"] as const,
  TIMEOUT: 600000,
  RECONNECTION: true,
  RECONNECTION_ATTEMPTS: 3,
  RECONNECTION_DELAY: 2000,
} as const

// Workflow Execution URLs
export const WORKFLOW_ENDPOINTS = {
  // Individual tool execution
  INDIVIDUAL_TOOL: "https://knowledgebase-c0n499.stackos.io/natural-request",
  INDIVIDUAL_TOOL_STATUS: "https://knowledgebase-c0n499.stackos.io/api/workflows",
  
  // Full workflow execution
  FULL_WORKFLOW: `${process.env.NEXT_PUBLIC_NFT_USER_AGENT_URL}/natural-request`,
  FULL_WORKFLOW_STATUS: `${process.env.NEXT_PUBLIC_REDIS_USER_AGENT_URL}/api/workflows`,
} as const

// API Key Generation
export const API_KEY_CONFIG = {
  GENERATION_URL: "https://lighthouseservice-c0n1.stackos.io/generate-api-key",
  STORAGE_KEY: "skynet_api_key",
  VALIDITY_DURATION: 24 * 60 * 60 * 1000, // 24 hours
} as const
```

### Type Definitions (src/types/index.ts)
```typescript
// Agent Types
export interface Agent {
  id: string
  name: string
  description: string
}

export interface SubnetItem {
  unique_id: string
  itemID: number
  inputItemID: number[]
  systemPrompt: string
  id: string
  hints: string[]
  input: string
  doubts: string[]
  output: string
  prompt: string
  subnetID: string
  reasoning: string
  subnetURL: string
  fileUpload: boolean
  subnetName: string
  description: string
  fileDownload: boolean
  expectedInput: string
  promptExample: string
  expectedOutput: string
  supports_rabbitmq?: boolean
  agentCollection?: {
    agentAddress: string
    agentID: string
  }
}

export interface AgentDetail extends Agent {
  id?: string
  subnet_list: SubnetItem[]
  user_address: string
  layout: AgentLayout
  is_deployed: boolean
  ipfs_hash: string
  collection_id: string
  nft_address: string
  agentNFTId?: string
}

export interface AgentLayout {
  startPosition: { x: number; y: number }
  endPosition: { x: number; y: number }
  subnetPositions: { [key: string]: { x: number; y: number } }
}

// Workflow Execution Types
export interface WorkflowExecutionPayload {
  agentId?: string
  prompt: string
  workflow: WorkflowItem[]
  userAuthPayload?: {
    userAddress: string
    signature: string
    message: string
  }
  accountNFT?: {
    collectionID: string
    nftID: string
  }
  isIndividualToolRun?: boolean
  activeNodeId?: string
}

export interface WorkflowItem {
  itemId: string
  agentCollection: {
    agentAddress: string
    agentID: string
  }
}

export interface WorkflowExecutionResponse {
  requestId: string
  status: 'pending' | 'processing' | 'in_progress' | 'completed' | 'error'
  message?: string
  data?: any
  workflowStatus?: string
  currentSubnet?: string
}

// Web3 Types
export enum CONNECT_STATES {
  INITIALIZING = 'INITIALIZING',
  IDLE = 'IDLE',
  CONNECTING = 'CONNECTING',
  CONNECTED = 'CONNECTED',
  ERROR = 'ERROR',
  DISCONNECTING = 'DISCONNECTING',
}

export interface IWeb3State {
  address: string
  isAuthenticated: boolean
}

export type WalletType = 'metamask' | 'phantom'

// API Response Types
export interface AgentResponse {
  success: boolean
  data: {
    agents: Agent[]
    pagination: {
      page: number
      limit: number
      total: number
      totalPages: number
      hasNext: boolean
      hasPrev: boolean
    }
  }
  message: string
}

export interface AgentDetailResponse {
  success: boolean
  data: AgentDetail
  message: string
}

// API Key Types
export interface ApiKeyData {
  apiKey: string
  userAddress: string
  nftId: string
  timestamp: number
}
```

### API Key Manager (src/utils/api-key-manager.ts)
```typescript
import axios from 'axios'
import { getAuthWithRetry, ensureUserHasNFT } from './skynet-helper'
import { API_KEY_CONFIG } from '@/config/constants'

export class ApiKeyManager {
  private static instance: ApiKeyManager
  private cachedApiKey: string | null = null

  public static getInstance(): ApiKeyManager {
    if (!ApiKeyManager.instance) {
      ApiKeyManager.instance = new ApiKeyManager()
    }
    return ApiKeyManager.instance
  }

  public async getApiKey(skyBrowser: any, web3Context: any): Promise<string> {
    if (this.cachedApiKey) {
      return this.cachedApiKey
    }

    const storedApiKeyData = this.getStoredApiKeyData()
    if (storedApiKeyData && this.isApiKeyValid(storedApiKeyData)) {
      this.cachedApiKey = storedApiKeyData.apiKey
      return storedApiKeyData.apiKey
    }

    const newApiKey = await this.generateNewApiKey(skyBrowser, web3Context)
    this.cachedApiKey = newApiKey
    return newApiKey
  }

  private async generateNewApiKey(skyBrowser: any, web3Context: any): Promise<string> {
    try {
      const auth = await getAuthWithRetry(skyBrowser)
      const nftResult = await ensureUserHasNFT(skyBrowser, web3Context)

      if (!nftResult.success) {
        throw new Error(nftResult.message || 'Failed to get NFT for API key generation')
      }

      const response = await axios.post(API_KEY_CONFIG.GENERATION_URL, {
        userAuthPayload: JSON.stringify(auth.data),
        accountNFT: JSON.stringify({
          collectionID: '0',
          nftID: nftResult.nftId,
        }),
      })

      const apiKey = response.data.data.apiKey
      
      this.storeApiKeyData({
        apiKey,
        userAddress: auth.data.userAddress,
        nftId: nftResult.nftId,
        timestamp: Date.now(),
      })

      return apiKey
    } catch (error) {
      console.error('Error generating API key:', error)
      throw new Error('Failed to generate API key')
    }
  }

  private getStoredApiKeyData(): any {
    try {
      const stored = localStorage.getItem(API_KEY_CONFIG.STORAGE_KEY)
      return stored ? JSON.parse(stored) : null
    } catch {
      return null
    }
  }

  private isApiKeyValid(data: any): boolean {
    return Date.now() - data.timestamp < API_KEY_CONFIG.VALIDITY_DURATION
  }

  private storeApiKeyData(data: any): void {
    try {
      localStorage.setItem(API_KEY_CONFIG.STORAGE_KEY, JSON.stringify(data))
    } catch (error) {
      console.error('Failed to store API key data:', error)
    }
  }

  public clearCache(): void {
    this.cachedApiKey = null
    localStorage.removeItem(API_KEY_CONFIG.STORAGE_KEY)
  }
}

export const apiKeyManager = ApiKeyManager.getInstance()
```

### HTTP Workflow Executor (src/utils/workflow-executor.ts)
```typescript
import axios from 'axios'
import { apiKeyManager } from './api-key-manager'
import { WORKFLOW_ENDPOINTS } from '@/config/constants'
import { WorkflowExecutionPayload, WorkflowExecutionResponse } from '@/types'

export class WorkflowExecutor {
  private static instance: WorkflowExecutor

  public static getInstance(): WorkflowExecutor {
    if (!WorkflowExecutor.instance) {
      WorkflowExecutor.instance = new WorkflowExecutor()
    }
    return WorkflowExecutor.instance
  }

  /**
   * Execute workflow using HTTP POST + Polling pattern
   */
  public async executeWorkflow(
    payload: WorkflowExecutionPayload,
    skyBrowser: any,
    web3Context: any,
    onStatusUpdate?: (data: WorkflowExecutionResponse) => void
  ): Promise<string> {
    // Get API key
    const apiKey = await apiKeyManager.getApiKey(skyBrowser, web3Context)
    
    const headers = {
      'Content-Type': 'application/json',
      'x-api-key': apiKey,
    }

    // Determine endpoint based on execution type
    const endpoint = payload.isIndividualToolRun 
      ? WORKFLOW_ENDPOINTS.INDIVIDUAL_TOOL
      : WORKFLOW_ENDPOINTS.FULL_WORKFLOW

    // Initiate workflow with HTTP POST
    const response = await axios.post(endpoint, payload, { headers })
    const requestId = response.data.requestId

    // Start polling for status updates
    this.startPolling(requestId, payload.isIndividualToolRun, apiKey, onStatusUpdate)

    return requestId
  }

  /**
   * Poll workflow status every 2 seconds
   */
  private startPolling(
    requestId: string,
    isIndividualTool: boolean = false,
    apiKey: string,
    onStatusUpdate?: (data: WorkflowExecutionResponse) => void
  ): void {
    const pollingInterval = setInterval(async () => {
      try {
        const statusEndpoint = isIndividualTool
          ? `${WORKFLOW_ENDPOINTS.INDIVIDUAL_TOOL_STATUS}/${requestId}`
          : `${WORKFLOW_ENDPOINTS.FULL_WORKFLOW_STATUS}/${requestId}`

        const statusResponse = await axios.get(statusEndpoint, {
          headers: {
            'x-api-key': apiKey,
            'Content-Type': 'application/json',
          },
        })

        const statusData = statusResponse.data

        // Call status update callback
        if (onStatusUpdate) {
          onStatusUpdate(statusData)
        }

        // Clear interval when workflow is completed or failed
        const isCompleted = isIndividualTool 
          ? (statusData.status === 'completed' || statusData.status === 'failed')
          : (statusData.workflowStatus === 'completed' || statusData.workflowStatus === 'failed')

        if (isCompleted) {
          clearInterval(pollingInterval)
        }
      } catch (error) {
        console.error('Polling error:', error)
        clearInterval(pollingInterval)
      }
    }, 2000) // Poll every 2 seconds
  }

  /**
   * Execute individual tool/subnet
   */
  public async executeIndividualTool(
    subnetURL: string,
    prompt: string,
    systemPrompt: string,
    agentCollection: { agentAddress: string; agentID: string },
    skyBrowser: any,
    web3Context: any
  ) {
    try {
      const apiKey = await apiKeyManager.getApiKey(skyBrowser, web3Context)
      
      const headers = {
        'Content-Type': 'application/json',
        'x-api-key': apiKey,
      }

      const payload = {
        prompt,
        systemPrompt,
        agentCollection,
      }

      const response = await fetch(subnetURL, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload),
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      console.error('Error executing individual tool:', error)
      throw error
    }
  }
}

export const workflowExecutor = WorkflowExecutor.getInstance()
```

### Workflow Execution Hook (src/hooks/use-workflow-executor.ts)
```typescript
import { useCallback } from 'react'
import { workflowExecutor } from '@/utils/workflow-executor'
import { useWorkflowStore, useExecutionStatusStore, useUIStore } from '@/stores'
import { WorkflowExecutionPayload } from '@/types'
import { STATUS } from '@/config/constants'

export function useWorkflowExecutor() {
  const { updateExecutionStatus } = useExecutionStatusStore()
  const { updateTestStatus } = useUIStore()

  const executeWorkflow = useCallback(
    async (
      payload: WorkflowExecutionPayload,
      skyBrowser: any,
      web3Context: any
    ) => {
      try {
        // Set running state
        updateExecutionStatus({ isRunning: true })
        updateTestStatus({
          isRunning: true,
          status: STATUS.PROCESSING,
        })

        // Execute workflow with HTTP polling
        const requestId = await workflowExecutor.executeWorkflow(
          payload,
          skyBrowser,
          web3Context,
          (statusData) => {
            // Handle status updates from polling
            console.log('üì° Workflow status update:', statusData)

            // Update stores based on status
            if (payload.isIndividualToolRun) {
              if (statusData.status === 'completed' || statusData.status === 'failed') {
                updateExecutionStatus({ isRunning: false })
                updateTestStatus({
                  isRunning: false,
                  status: statusData.status === 'completed' ? STATUS.TEST_COMPLETED : STATUS.FAILED,
                })
              }
            } else {
              if (statusData.workflowStatus === 'completed' || statusData.workflowStatus === 'failed') {
                updateExecutionStatus({ isRunning: false })
                updateTestStatus({
                  isRunning: false,
                  status: statusData.workflowStatus === 'completed' ? STATUS.TEST_COMPLETED : STATUS.FAILED,
                })
              }

              // Update current subnet for in-progress workflows
              if (statusData.workflowStatus === 'in_progress') {
                updateExecutionStatus({
                  currentSubnet: statusData.currentSubnet,
                })
              }
            }
          }
        )

        // Store request ID
        updateExecutionStatus({ responseId: requestId })

      } catch (error: any) {
        updateExecutionStatus({ isRunning: false })
        updateTestStatus({ isRunning: false, status: STATUS.FAILED })
        throw error
      }
    },
    [updateExecutionStatus, updateTestStatus]
  )

  return {
    executeWorkflow,
  }
}
```

### Agent Store (src/stores/agent-store.ts)
```typescript
import { create } from 'zustand'
import { subscribeWithSelector } from 'zustand/middleware'
import { Agent } from '@/types'

interface AgentState {
  selectedAgents: { [id: string]: any }
  hasUnsavedChanges: boolean
  
  // Actions
  setSelectedAgents: (agents: { [id: string]: any }) => void
  addAgent: (agent: any) => void
  removeAgent: (agentId: string) => void
  setHasUnsavedChanges: (hasChanges: boolean) => void
  reset: () => void
}

export const useAgentStore = create<AgentState>()(
  subscribeWithSelector((set, get) => ({
    selectedAgents: {},
    hasUnsavedChanges: false,
    
    setSelectedAgents: (selectedAgents) => set({ selectedAgents }),
    
    addAgent: (agent) => set((state) => ({
      selectedAgents: { ...state.selectedAgents, [agent.id]: agent },
      hasUnsavedChanges: true,
    })),
    
    removeAgent: (agentId) => set((state) => {
      const { [agentId]: removed, ...rest } = state.selectedAgents
      return { selectedAgents: rest, hasUnsavedChanges: true }
    }),
    
    setHasUnsavedChanges: (hasUnsavedChanges) => set({ hasUnsavedChanges }),
    
    reset: () => set({ 
      selectedAgents: {}, 
      hasUnsavedChanges: false 
    }),
  }))
)
```

### Agent API Controller (src/controllers/agents.ts)
```typescript
import axiosInstance from '@/lib/axios'
import { AgentResponse, AgentDetailResponse, AgentDetail } from '@/types'

// Agent Queries
export const getAgents = async (params?: {
  search?: string
  limit?: number
  offset?: number
}): Promise<AgentResponse> => {
  const response = await axiosInstance.get('/agents', {
    params: {
      search: params?.search,
      limit: params?.limit || 10,
      offset: params?.offset || 0,
    },
  })
  return response.data
}

export const getUserAgents = async (params?: {
  search?: string
  limit?: number
  offset?: number
  address: string
}): Promise<AgentResponse> => {
  const response = await axiosInstance.get('/agents', {
    params: {
      search: params?.search,
      limit: params?.limit || 10,
      offset: params?.offset || 0,
      user_address: params?.address,
    },
  })
  return response.data
}

export const getAgentById = async (id: string): Promise<AgentDetailResponse> => {
  const response = await axiosInstance.get(`/agents/${id}`)
  return response.data
}

// Agent Mutations  
export const createAgent = async (agentData: Partial<AgentDetail>) => {
  const response = await axiosInstance.post('/agents', agentData)
  return response.data
}

export const updateAgent = async (id: string, agentData: Partial<AgentDetail>) => {
  const response = await axiosInstance.put(`/agents/${id}`, agentData)
  return response.data
}

export const deleteAgent = async (id: string) => {
  const response = await axiosInstance.delete(`/agents/${id}`)
  return response.data
}
```

### Axios Configuration (src/lib/axios.ts)
```typescript
import axios from 'axios'
import { apiKeyManager } from '@/utils/api-key-manager'

const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
})

export const getAxiosInstanceWithApiKey = async (
  skyBrowser?: any,
  web3Context?: any
) => {
  if (skyBrowser && web3Context) {
    try {
      const apiKey = await apiKeyManager.getApiKey(skyBrowser, web3Context)
      return axios.create({
        baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': apiKey,
        },
      })
    } catch (error) {
      console.warn('Failed to get API key for axios instance:', error)
    }
  }

  return axiosInstance
}

export default axiosInstance
```

## üé® UI Components Setup

### Button Component (src/components/ui/button.tsx)
```typescript
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }
```

## üöÄ Getting Started Instructions

1. **Create Next.js Project**: 
   ```bash
   npx create-next-app@latest skynet-agent-app --typescript --tailwind --eslint --app
   ```

2. **Install Dependencies**:
   ```bash
   npm install @decloudlabs/skynet@0.6.28 @lifi/sdk@^3.6.0 zustand axios ethers @web3auth/modal-react-hooks @web3auth/base socket.io-client@^4.8.1
   ```

3. **Copy File Structure**: Create the above files in their respective paths

4. **Configure Environment**: Add environment variables to `.env.local`

5. **Run Development Server**:
   ```bash
   npm run dev
   ```

## üîë Key Architecture Decisions

### Workflow Execution
- **HTTP POST + Polling**: No WebSocket connections for workflow execution
- **Redis Integration**: Uses Redis User Agent URL for status polling
- **API Key Authentication**: Centralized API key management with caching
- **NFT-based Access**: Requires NFT ownership for workflow execution

### Agent Generation
- **Socket.IO**: Only used for real-time agent generation from natural language
- **Real-time Updates**: WebSocket connection for generation progress

### State Management
- **Zustand Stores**: Centralized state management
- **HTTP Polling**: 2-second intervals for workflow status
- **Response Normalization**: Unified response handling

This boilerplate provides a complete foundation for building Skynet agent workflow applications with HTTP-based execution, proper API key management, and real-time agent generation. 